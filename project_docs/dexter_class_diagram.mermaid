classDiagram
    class User {
        +UUID id
        +String name
        +String email
        +String organization
        +UserRole role
        +String[] regions
        +boolean isActive
        +DateTime lastLogin
        +__init__(name, email, organization, role)
        +updateProfile(profile_data)
        +getActivityLog()
    }
    
    class UserRole {
        <<enumeration>>
        ADMIN
        RESEARCHER
        OBSERVER
        ANALYST
        VIEWER
    }
    
    class Alert {
        +UUID id
        +String title
        +String description
        +AlertType type
        +AlertSeverity severity
        +DateTime timestamp
        +UUID[] narrativeIds
        +UUID[] actorIds
        +UUID createdBy
        +boolean isAcknowledged
        +__init__(title, description, type, severity)
        +acknowledge()
        +escalate()
        +assignTo(userId)
    }
    
    class AlertType {
        <<enumeration>>
        VOLUME_SPIKE
        NEW_NARRATIVE
        NEW_INFLUENCER
        COORDINATED_ACTIVITY
        GEOGRAPHIC_SHIFT
    }
    
    class AlertSeverity {
        <<enumeration>>
        LOW
        MEDIUM
        HIGH
        CRITICAL
    }
    
    class Narrative {
        +UUID id
        +String title
        +String description
        +String[] keywords
        +String[] hashtags
        +NarrativeCategory category
        +float confidence
        +DateTime firstDetected
        +DateTime lastUpdated
        +int contentCount
        +String[] languages
        +UUID[] relatedNarrativeIds
        +__init__(title, description, category)
        +addKeywords(keywords)
        +addHashtags(hashtags)
        +updateConfidence(confidence)
        +getRelatedContent()
        +getSpreadMetrics()
    }
    
    class NarrativeCategory {
        <<enumeration>>
        VOTE_RIGGING
        ETHNIC_PROFILING
        CANDIDATE_IMPERSONATION
        VOTER_INTIMIDATION
        PROCEDURAL_MISINFORMATION
        FOREIGN_INTERFERENCE
    }
    
    class Content {
        +UUID id
        +String text
        +String[] mediaUrls
        +ContentType type
        +Platform platform
        +String originalId
        +String url
        +DateTime publishedAt
        +Actor author
        +Location location
        +String language
        +float[] sentimentScores
        +UUID[] narrativeIds
        +String[] detectedEntities
        +VerificationStatus verificationStatus
        +__init__(text, type, platform, originalId)
        +extractEntities()
        +analyzeText()
        +classifyNarrative()
        +verify()
    }
    
    class ContentType {
        <<enumeration>>
        TEXT
        IMAGE
        VIDEO
        AUDIO
        MEME
        STICKER
    }
    
    class Platform {
        <<enumeration>>
        TWITTER_X
        FACEBOOK
        YOUTUBE
        TIKTOK
        TELEGRAM
        WHATSAPP
        INSTAGRAM
        OTHER
    }
    
    class VerificationStatus {
        <<enumeration>>
        UNVERIFIED
        CONFIRMED_TRUE
        CONFIRMED_FALSE
        PARTIALLY_FALSE
        MISLEADING
        SATIRE
        UNDER_REVIEW
    }
    
    class Actor {
        +UUID id
        +String name
        +String platformId
        +Platform platform
        +int followerCount
        +String profileUrl
        +String[] previousNames
        +DateTime accountCreated
        +ActorType type
        +float influenceScore
        +bool isVerified
        +bool onWatchlist
        +__init__(name, platformId, platform)
        +updateInfluenceScore()
        +getActivityHistory()
        +getConnectionNetwork(depth)
        +addToWatchlist(reason)
    }
    
    class ActorType {
        <<enumeration>>
        INDIVIDUAL
        ORGANIZATION
        BOT
        TROLL
        COORDINATED_GROUP
        UNKNOWN
    }
    
    class Network {
        +UUID id
        +String name
        +String description
        +UUID[] actorIds
        +NetworkType type
        +DateTime created
        +DateTime lastUpdated
        +float cohesionScore
        +float coordinationScore
        +__init__(name, description, type)
        +addActors(actorIds)
        +analyzeConnections()
        +detectCoordination()
        +exportGraphData()
    }
    
    class NetworkType {
        <<enumeration>>
        ORGANIC
        COORDINATED
        MIXED
        UNKNOWN
    }
    
    class Location {
        +UUID id
        +String name
        +String country
        +String region
        +String city
        +float latitude
        +float longitude
        +LocationType type
        +__init__(name, country, region, city)
        +getGeocode()
    }
    
    class LocationType {
        <<enumeration>>
        EXACT
        APPROXIMATE
        REGION_LEVEL
        COUNTRY_LEVEL
        UNKNOWN
    }
    
    class Lexicon {
        +UUID id
        +String name
        +String description
        +String language
        +LexiconType type
        +String[] terms
        +String[] patterns
        +DateTime created
        +DateTime lastUpdated
        +__init__(name, description, language, type)
        +addTerms(terms)
        +addPatterns(patterns)
        +matchText(text)
        +exportLexicon()
    }
    
    class LexiconType {
        <<enumeration>>
        HASHTAGS
        KEYWORDS
        SLANG
        DOG_WHISTLES
        MEMES
    }
    
    class Report {
        +UUID id
        +String title
        +String description
        +ReportType type
        +UUID createdBy
        +DateTime createdAt
        +DateTime period_start
        +DateTime period_end
        +UUID[] narrativeIds
        +UUID[] actorIds
        +UUID[] locationIds
        +Map~String, Object~ parameters
        +String[] exportFormats
        +__init__(title, description, type, createdBy)
        +generate()
        +export(format)
        +schedule(frequency, recipients)
    }
    
    class ReportType {
        <<enumeration>>
        DAILY_SUMMARY
        TREND_ANALYSIS
        ACTOR_NETWORK
        NARRATIVE_DEEP_DIVE
        GEOGRAPHIC_SPREAD
        CUSTOM
    }
    
    class DataCollector {
        +UUID id
        +String name
        +Platform platform
        +Map~String, String~ credentials
        +DateTime lastCollection
        +CollectorStatus status
        +int rateLimit
        +int rateLimitRemaining
        +__init__(name, platform, credentials)
        +collectData(parameters)
        +validateCredentials()
        +updateRateLimit(limit, remaining)
        +handleErrors(error)
    }
    
    class CollectorStatus {
        <<enumeration>>
        ACTIVE
        RATE_LIMITED
        ERROR
        PAUSED
        DISABLED
    }
    
    class MLModel {
        +UUID id
        +String name
        +String description
        +ModelType type
        +String version
        +String[] languages
        +float accuracy
        +float precision
        +float recall
        +DateTime trained
        +Map~String, Object~ parameters
        +__init__(name, description, type)
        +predict(data)
        +evaluate()
        +retrain(dataset)
        +exportModel(format)
    }
    
    class ModelType {
        <<enumeration>>
        NARRATIVE_CLASSIFIER
        NETWORK_ANALYZER
        ENTITY_EXTRACTOR
        SENTIMENT_ANALYZER
        MEDIA_CLASSIFIER
        COORDINATION_DETECTOR
    }
    
    class Dashboard {
        +UUID id
        +String name
        +UUID ownerId
        +DashboardType type
        +Widget[] widgets
        +Map~String, Object~ settings
        +String[] sharedWith
        +__init__(name, ownerId, type)
        +addWidget(widget)
        +removeWidget(widgetId)
        +updateLayout(layout)
        +share(userIds)
    }
    
    class DashboardType {
        <<enumeration>>
        OVERVIEW
        NARRATIVE_FOCUSED
        ACTOR_NETWORK
        GEOGRAPHIC
        CUSTOM
    }
    
    class Widget {
        +UUID id
        +String title
        +WidgetType type
        +Map~String, Object~ config
        +int width
        +int height
        +int posX
        +int posY
        +String dataSource
        +Map~String, Object~ filters
        +__init__(title, type, config)
        +updateConfig(config)
        +fetchData()
        +render()
    }
    
    class WidgetType {
        <<enumeration>>
        LINE_CHART
        BAR_CHART
        PIE_CHART
        NETWORK_GRAPH
        MAP
        TABLE
        METRIC
        FEED
        ALERT_LIST
    }
    
    class APIClient {
        +String apiKey
        +String baseUrl
        +DateTime lastRequest
        +int requestCount
        +Map~String, String~ headers
        +__init__(apiKey, baseUrl)
        +get(endpoint, parameters)
        +post(endpoint, data)
        +put(endpoint, data)
        +delete(endpoint, parameters)
        +handleRateLimit()
    }
    
    class AnalyticsService {
        <<service>>
        +analyzeNarrativeTrends(narrativeIds, timeframe)
        +detectAnomalies(dataset, parameters)
        +calculateActorInfluence(actorId)
        +identifyCoordinatedBehavior(actorIds)
        +generateNetworkGraph(parameters)
    }
    
    class NotificationService {
        <<service>>
        +createAlert(alertData)
        +sendNotification(userId, message, channel)
        +notifyGroup(userIds, message)
        +scheduleNotification(message, timestamp, recipients)
        +retrieveNotificationHistory(userId)
    }
    
    class AuthService {
        <<service>>
        +authenticateUser(email, password)
        +generateToken(userId)
        +validateToken(token)
        +resetPassword(email)
        +checkPermissions(userId, resource, action)
    }

    User "1" --> "*" Alert: receives
    User "*" --> "*" Dashboard: owns/views
    User --> UserRole: has
    Alert --> AlertType: has
    Alert --> AlertSeverity: has
    Alert "*" --> "*" Narrative: references
    Alert "*" --> "*" Actor: references
    Narrative --> NarrativeCategory: has
    Narrative "1" --> "*" Content: contains
    Content --> ContentType: has
    Content --> Platform: from
    Content --> VerificationStatus: has
    Content "*" --> "1" Actor: authored by
    Content --> Location: has
    Actor --> ActorType: has
    Actor --> Platform: on
    Actor "*" --> "*" Network: belongs to
    Network --> NetworkType: has
    Network "1" --> "*" Actor: contains
    Lexicon --> LexiconType: has
    Report "*" --> "*" Narrative: includes
    Report "*" --> "*" Actor: includes
    Report "*" --> "*" Location: includes
    Report --> ReportType: has
    Report --> User: created by
    DataCollector --> Platform: collects from
    DataCollector --> CollectorStatus: has
    MLModel --> ModelType: has
    Dashboard --> DashboardType: has
    Dashboard "1" --> "*" Widget: contains
    Widget --> WidgetType: has